{"version":3,"sources":["../../src/hooks/useLocalStorage.js"],"names":["useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACe,SAASA,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AACzD;AACA;AACA,kBAAsC,qBAAS,MAAM;AACnD,QAAI;AACF;AACA,UAAMC,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAb,CAFE,CAGF;;AAAA;AACA,aAAOE,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBD,YAAjC;AACD,KALD,CAKE,OAAOO,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOP,YAAP;AACD;AACF,GAXqC,CAAtC;AAAA;AAAA,MAAOU,WAAP;AAAA,MAAoBC,cAApB,iBAHyD,CAgBzD;AACA;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAI;AACF;AACA,UAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,WAAD,CAAjC,GAAiDG,KADnD,CAFE,CAIF;;AACAF,MAAAA,cAAc,CAACG,YAAD,CAAd,CALE,CAMF;;AACAZ,MAAAA,MAAM,CAACC,YAAP,CAAoBa,OAApB,CAA4BjB,GAA5B,EAAiCM,IAAI,CAACY,SAAL,CAAeH,YAAf,CAAjC;AACD,KARD,CAQE,OAAOP,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAbD;;AAeA,SAAO,CAACG,WAAD,EAAcE,QAAd,CAAP;AACD","sourcesContent":["import { useState } from \"react\";\n\n// Usage\n// function App() {\n//   // Similar to useState but first arg is key to the value in local storage.\n//   const [name, setName] = useLocalStorage(\"name\", \"Bob\")\n\n//   return (\n//     <div>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter your name\"\n//         value={name}\n//         onChange={(e) => setName(e.target.value)}\n//       />\n//     </div>\n//   )\n// }\n\n// Hook\nexport default function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n"],"file":"useLocalStorage.js"}