{"version":3,"sources":["../src/utils.js"],"names":["formatDeployTime","time","minutes","Math","floor","seconds","formatDeployDate","d","localizedDate","replace","getSiteBadge","siteId","Date","getTime","fetch","getSiteDeploys","options","getSite","postSiteNewBuild","clearCache","headers","method","body","JSON","stringify","clear_cache","getDeployStatus","deploy","publishedDeployId","id","state","error_message","toLowerCase","includes","plugin_state"],"mappings":"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","sourcesContent":["import { format, isToday, isYesterday, getYear } from \"date-fns\";\n\nexport const formatDeployTime = (time) => {\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  if (minutes === 0 && seconds === 0) {\n    return \"\";\n  }\n\n  return `Deployed in ${minutes > 0 ? `${minutes}m` : \"\"} ${\n    seconds > 0 ? `${seconds}s` : \"\"\n  }`;\n};\n\nexport const formatDeployDate = (d) => {\n  if (isToday(d)) {\n    return `Today at ${format(d, \"p\")}`;\n  }\n\n  if (isYesterday(d)) {\n    return `Yesterday at ${format(d, \"p\")}`;\n  }\n\n  const localizedDate = format(d, \"PP\").replace(`, ${getYear(d)}`, \"\");\n\n  return `${localizedDate} at ${format(d, \"p\")}`;\n};\n\nexport const getSiteBadge = (siteId) => {\n  const time = new Date().getTime();\n\n  return fetch(\n    `https://api.netlify.com/api/v1/badges/${siteId}/deploy-status?${time}`\n  );\n};\n\nexport const getSiteDeploys = (siteId, options = null) =>\n  fetch(`https://api.netlify.com/api/v1/sites/${siteId}/deploys`, options);\n\nexport const getSite = (siteId, options = null) =>\n  fetch(`https://api.netlify.com/api/v1/sites/${siteId}`, options);\n\nexport const postSiteNewBuild = ({ siteId, clearCache, headers }) => {\n  const options = {\n    method: \"POST\",\n    headers,\n    // eslint-disable-next-line camelcase\n    body: JSON.stringify({ clear_cache: clearCache }),\n  };\n\n  return fetch(\n    `https://api.netlify.com/api/v1/sites/${siteId}/builds`,\n    options\n  );\n};\n\nexport const getDeployStatus = (deploy, publishedDeployId = null) => {\n  if (publishedDeployId === deploy?.id) {\n    return \"published\";\n  }\n\n  if (\n    deploy.state === \"error\" &&\n    deploy?.error_message?.toLowerCase().includes(\"canceled build\") &&\n    deploy?.plugin_state === \"failed_build\"\n  ) {\n    return \"failed_due_to_plugin_error\";\n  }\n\n  if (\n    deploy?.state === \"error\" &&\n    deploy?.error_message\n      ?.toLowerCase()\n      .includes(\"build script returned non-zero exit code\")\n  ) {\n    return \"failed\";\n  }\n\n  if (\n    deploy?.state === \"error\" ||\n    deploy?.error_message?.toLowerCase().includes(\"canceled build\")\n  ) {\n    return \"canceled\";\n  }\n\n  return \"\";\n};\n"],"file":"utils.js"}